<Type Name="DocumentQueryable" FullName="Microsoft.Azure.Documents.Linq.DocumentQueryable">
  <TypeSignature Language="C#" Value="public static class DocumentQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DocumentQueryable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.Linq.DocumentQueryable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
    <AssemblyVersion>1.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class provides extension methods for converting a <see cref="T:System.Linq.IQueryable`1" /> object to a <see cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1" /> object.
            </summary>
    <remarks>
             The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class provides implementation of standard query methods for querying resources in DocumentDB. 
             These methods enable you to express traversal, filter, and projection operations over data persisted in the Azure DocumentDB database service.  They are defined as methods that 
             extend IQueryable, and do not perform any querying directly.  Instead, their functionality is to create queries 
             based the resource and query expression provided.  The actual query execution occurs when enumeration forces the expression tree associated with an IQueryable object to be executed.
            </remarks>
    <altmember cref="T:Microsoft.Azure.Documents.IDocumentClient" />
    <altmember cref="T:Microsoft.Azure.Documents.Client.DocumentClient" />
  </Docs>
  <Members>
    <Member MemberName="AsDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;T&gt; AsDocumentQuery&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Documents.Linq.IDocumentQuery`1&lt;!!T&gt; AsDocumentQuery&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AsDocumentQuery``1(System.Linq.IQueryable{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="query">the IQueryable{T} to be converted.</param>
        <summary>
            Converts an IQueryable to IDocumentQuery which supports pagination and asynchronous execution in the Azure DocumentDB database service.
            </summary>
        <returns>An IDocumentQuery{T} that can evaluate the query.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example shows how to run a query asynchronously using the AsDocumentQuery() interface.
            
            <code language="c#"><![CDATA[
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
